for i = 99:-1:1 print("\n$i bottles of beer on the wall\n$i bottles of beer\nTake one down, pass it around\n$(i-1) bottles of beer on the wall\n") end
function arithmetic (a = parse(Int, readline()), b = parse(Int, readline()))
for op in  [+,-,*,div,rem]
println("a $op b = $(op(a,b))")
end
end
ab = [a;b]
ab = vcat(a,b)
ab = hcat(a,b)
append!(a,b)
dict = Dict('a' => 97, 'b' => 98)
dict = Dict(c => Int(c) for c = 'a':'d')
dict['é'] = 233; dict
emptydict = Dict()
dict["a"] = 1
typeof(dict)
function binarysearch(lst::Vector{T}, val::T) where T
low = 1
high = length(lst)
while low ≤ high
mid = (low + high) ÷ 2
if lst[mid] > val
high = mid - 1
elseif lst[mid] < val
low = mid + 1
else
return mid
end
end
return 0
end
for i in one(Int64):typemax(Int64)
print(oct(i), " ")
sleep(0.1)
end
using Printf
struct Digraph{T <: Real,U}
edges::Dict{Tuple{U,U},T}
verts::Set{U}
end
function Digraph(edges::Vector{Tuple{U,U,T}}) where {T <: Real,U}
vnames = Set{U}(v for edge in edges for v in edge[1:2])
adjmat = Dict((edge[1], edge[2]) => edge[3] for edge in edges)
return Digraph(adjmat, vnames)
end
vertices(g::Digraph) = g.verts
edges(g::Digraph)    = g.edges
neighbours(g::Digraph, v) = Set((b, c) for ((a, b), c) in edges(g) if a == v)
function dijkstrapath(g::Digraph{T,U}, source::U, dest::U) where {T, U}
@assert source ∈ vertices(g) "$source is not a vertex in the graph"
if source == dest return [source], 0 end
inf  = typemax(T)
dist = Dict(v => inf for v in vertices(g))
prev = Dict(v => v   for v in vertices(g))
dist[source] = 0
Q = copy(vertices(g))
neigh = Dict(v => neighbours(g, v) for v in vertices(g))
while !isempty(Q)
u = reduce((x, y) -> dist[x] < dist[y] ? x : y, Q)
pop!(Q, u)
if dist[u] == inf || u == dest break end
for (v, cost) in neigh[u]
alt = dist[u] + cost
if alt < dist[v]
dist[v] = alt
prev[v] = u
end
end
end
rst, cost = U[], dist[dest]
if prev[dest] == dest
return rst, cost
else
while dest != source
pushfirst!(rst, dest)
dest = prev[dest]
end
pushfirst!(rst, dest)
return rst, cost
end
end
const testgraph = [("a", "b", 7),  ("a", "c", 9),  ("a", "f", 14), ("b", "c", 10),
function testpaths()
g = Digraph(testgraph)
src, dst = "a", "e"
path, cost = dijkstrapath(g, src, dst)
println("Shortest path from $src to $dst: ", isempty(path) ?
"no possible path" : join(path, " → "), " (cost $cost)")
@printf("\n%4s | %3s | %s\n", "src", "dst", "path")
for src in vertices(g), dst in vertices(g)
path, cost = dijkstrapath(g, src, dst)
@printf("%4s | %3s | %s\n", src, dst, isempty(path) ? "no possible path" : join(path, " → ") * " ($cost)")
end
end
testpaths()
factorial(n)
Factorial of n. If n is an Integer, the factorial is computed as an integer (promoted to at
least 64 bits). Note that this may overflow if n is not small, but you can use factorial(big(n))
to compute the result exactly in arbitrary precision. If n is not an Integer, factorial(n) is
equivalent to gamma(n+1).
720
for i in 1:100
if i % 15 == 0
println("FizzBuzz")
elseif i % 3 == 0
println("Fizz")
elseif i % 5 == 0
println("Buzz")
else
println(i)
end
end
function multiply(a::Number, b::Number)
return a * b
end
abstract type HuffmanTree end
struct HuffmanLeaf <: HuffmanTree
ch::Char
freq::Int
end
struct HuffmanNode <: HuffmanTree
freq::Int
left::HuffmanTree
right::HuffmanTree
end
function makefreqdict(s::String)
d = Dict{Char, Int}()
for c in s
if !haskey(d, c)
d[c] = 1
else
d[c] += 1
end
end
d
end
function huffmantree(ftable::Dict)
trees::Vector{HuffmanTree} = [HuffmanLeaf(ch, fq) for (ch, fq) in ftable]
while length(trees) > 1
sort!(trees, lt = (x, y) -> x.freq < y.freq, rev = true)
least = pop!(trees)
nextleast = pop!(trees)
push!(trees, HuffmanNode(least.freq + nextleast.freq, least, nextleast))
end
trees[1]
end
printencoding(lf::HuffmanLeaf, code) = println(lf.ch == ' ' ? "space" : lf.ch, "\t", lf.freq, "\t", code)
function printencoding(nd::HuffmanNode, code)
code *= '0'
printencoding(nd.left, code)
code = code[1:end-1]
code *= '1'
printencoding(nd.right, code)
code = code[1:end-1]
end
const msg = "this is an example for huffman encoding"
println("Char\tFreq\tHuffman code")
printencoding(huffmantree(makefreqdict(msg)), "")
for i in 1:5
for j in 1:i
print("*")
end
println()
end
n = 1024
while n > 0
println(n)
n >>= 1
end
function mergesort(arr::Vector)
if length(arr) ≤ 1 return arr end
mid = length(arr) ÷ 2
lpart = mergesort(arr[1:mid])
rpart = mergesort(arr[mid+1:end])
rst = similar(arr)
i = ri = li = 1
@inbounds while li ≤ length(lpart) && ri ≤ length(rpart)
if lpart[li] ≤ rpart[ri]
rst[i] = lpart[li]
li += 1
else
rst[i] = rpart[ri]
ri += 1
end
i += 1
end
if li ≤ length(lpart)
copyto!(rst, i, lpart, li)
else
copyto!(rst, i, rpart, ri)
end
return rst
end
v = rand(-10:10, 10)
println("
using Printf
for i=1:12, j=0:12
if j == 0
@printf("%2d | ", i)
elseif i <= j
@printf("%3d%c", i * j, j == 12 ? '\n' : ' ')
else
print("    ")
end
end
palindrome(s) = s == reverse(s)
[9719=>1,431=>1,2099863=>1]
sort!(A, alg=QuickSort)
s = "I am a string"
if ismatch(r"string$", s)
println("'$s' ends with 'string'")
end
s = "hello"
println(s * " there!")
18
55
julia +([1,2,3]...)
6
192
function solve(n::Integer, from::Integer, to::Integer, via::Integer)
if n == 1
println("Move disk from $from to $to")
else
solve(n - 1, from, via, to)
solve(1, from, to, via)
solve(n - 1, via, to, from)
end
end
solve(4, 1, 2, 3)for i = 99:-1:1 print("\n$i bottles of beer on the wall\n$i bottles of beer\nTake one down, pass it around\n$(i-1) bottles of beer on the wall\n") end
function arithmetic (a = parse(Int, readline()), b = parse(Int, readline()))
for op in  [+,-,*,div,rem]
println("a $op b = $(op(a,b))")
end
end
ab = [a;b]
ab = vcat(a,b)
ab = hcat(a,b)
append!(a,b)
dict = Dict('a' => 97, 'b' => 98)
dict = Dict(c => Int(c) for c = 'a':'d')
dict['é'] = 233; dict
emptydict = Dict()
dict["a"] = 1
typeof(dict)
function binarysearch(lst::Vector{T}, val::T) where T
low = 1
high = length(lst)
while low ≤ high
mid = (low + high) ÷ 2
if lst[mid] > val
high = mid - 1
elseif lst[mid] < val
low = mid + 1
else
return mid
end
end
return 0
end
for i in one(Int64):typemax(Int64)
print(oct(i), " ")
sleep(0.1)
end
using Printf
struct Digraph{T <: Real,U}
edges::Dict{Tuple{U,U},T}
verts::Set{U}
end
function Digraph(edges::Vector{Tuple{U,U,T}}) where {T <: Real,U}
vnames = Set{U}(v for edge in edges for v in edge[1:2])
adjmat = Dict((edge[1], edge[2]) => edge[3] for edge in edges)
return Digraph(adjmat, vnames)
end
vertices(g::Digraph) = g.verts
edges(g::Digraph)    = g.edges
neighbours(g::Digraph, v) = Set((b, c) for ((a, b), c) in edges(g) if a == v)
function dijkstrapath(g::Digraph{T,U}, source::U, dest::U) where {T, U}
@assert source ∈ vertices(g) "$source is not a vertex in the graph"
if source == dest return [source], 0 end
inf  = typemax(T)
dist = Dict(v => inf for v in vertices(g))
prev = Dict(v => v   for v in vertices(g))
dist[source] = 0
Q = copy(vertices(g))
neigh = Dict(v => neighbours(g, v) for v in vertices(g))
while !isempty(Q)
u = reduce((x, y) -> dist[x] < dist[y] ? x : y, Q)
pop!(Q, u)
if dist[u] == inf || u == dest break end
for (v, cost) in neigh[u]
alt = dist[u] + cost
if alt < dist[v]
dist[v] = alt
prev[v] = u
end
end
end
rst, cost = U[], dist[dest]
if prev[dest] == dest
return rst, cost
else
while dest != source
pushfirst!(rst, dest)
dest = prev[dest]
end
pushfirst!(rst, dest)
return rst, cost
end
end
const testgraph = [("a", "b", 7),  ("a", "c", 9),  ("a", "f", 14), ("b", "c", 10),
function testpaths()
g = Digraph(testgraph)
src, dst = "a", "e"
path, cost = dijkstrapath(g, src, dst)
println("Shortest path from $src to $dst: ", isempty(path) ?
"no possible path" : join(path, " → "), " (cost $cost)")
@printf("\n%4s | %3s | %s\n", "src", "dst", "path")
for src in vertices(g), dst in vertices(g)
path, cost = dijkstrapath(g, src, dst)
@printf("%4s | %3s | %s\n", src, dst, isempty(path) ? "no possible path" : join(path, " → ") * " ($cost)")
end
end
testpaths()
factorial(n)
Factorial of n. If n is an Integer, the factorial is computed as an integer (promoted to at
least 64 bits). Note that this may overflow if n is not small, but you can use factorial(big(n))
to compute the result exactly in arbitrary precision. If n is not an Integer, factorial(n) is
equivalent to gamma(n+1).
720
for i in 1:100
if i % 15 == 0
println("FizzBuzz")
elseif i % 3 == 0
println("Fizz")
elseif i % 5 == 0
println("Buzz")
else
println(i)
end
end
function multiply(a::Number, b::Number)
return a * b
end
abstract type HuffmanTree end
struct HuffmanLeaf <: HuffmanTree
ch::Char
freq::Int
end
struct HuffmanNode <: HuffmanTree
freq::Int
left::HuffmanTree
right::HuffmanTree
end
function makefreqdict(s::String)
d = Dict{Char, Int}()
for c in s
if !haskey(d, c)
d[c] = 1
else
d[c] += 1
end
end
d
end
function huffmantree(ftable::Dict)
trees::Vector{HuffmanTree} = [HuffmanLeaf(ch, fq) for (ch, fq) in ftable]
while length(trees) > 1
sort!(trees, lt = (x, y) -> x.freq < y.freq, rev = true)
least = pop!(trees)
nextleast = pop!(trees)
push!(trees, HuffmanNode(least.freq + nextleast.freq, least, nextleast))
end
trees[1]
end
printencoding(lf::HuffmanLeaf, code) = println(lf.ch == ' ' ? "space" : lf.ch, "\t", lf.freq, "\t", code)
function printencoding(nd::HuffmanNode, code)
code *= '0'
printencoding(nd.left, code)
code = code[1:end-1]
code *= '1'
printencoding(nd.right, code)
code = code[1:end-1]
end
const msg = "this is an example for huffman encoding"
println("Char\tFreq\tHuffman code")
printencoding(huffmantree(makefreqdict(msg)), "")
for i in 1:5
for j in 1:i
print("*")
end
println()
end
n = 1024
while n > 0
println(n)
n >>= 1
end
function mergesort(arr::Vector)
if length(arr) ≤ 1 return arr end
mid = length(arr) ÷ 2
lpart = mergesort(arr[1:mid])
rpart = mergesort(arr[mid+1:end])
rst = similar(arr)
i = ri = li = 1
@inbounds while li ≤ length(lpart) && ri ≤ length(rpart)
if lpart[li] ≤ rpart[ri]
rst[i] = lpart[li]
li += 1
else
rst[i] = rpart[ri]
ri += 1
end
i += 1
end
if li ≤ length(lpart)
copyto!(rst, i, lpart, li)
else
copyto!(rst, i, rpart, ri)
end
return rst
end
v = rand(-10:10, 10)
println("
using Printf
for i=1:12, j=0:12
if j == 0
@printf("%2d | ", i)
elseif i <= j
@printf("%3d%c", i * j, j == 12 ? '\n' : ' ')
else
print("    ")
end
end
palindrome(s) = s == reverse(s)
[9719=>1,431=>1,2099863=>1]
sort!(A, alg=QuickSort)
s = "I am a string"
if ismatch(r"string$", s)
println("'$s' ends with 'string'")
end
s = "hello"
println(s * " there!")
18
55
julia +([1,2,3]...)
6
192
function solve(n::Integer, from::Integer, to::Integer, via::Integer)
if n == 1
println("Move disk from $from to $to")
else
solve(n - 1, from, via, to)
solve(1, from, to, via)
solve(n - 1, via, to, from)
end
end
solve(4, 1, 2, 3)for i = 99:-1:1 print("\n$i bottles of beer on the wall\n$i bottles of beer\nTake one down, pass it around\n$(i-1) bottles of beer on the wall\n") end
function arithmetic (a = parse(Int, readline()), b = parse(Int, readline()))
for op in  [+,-,*,div,rem]
println("a $op b = $(op(a,b))")
end
end
ab = [a;b]
ab = vcat(a,b)
ab = hcat(a,b)
append!(a,b)
dict = Dict('a' => 97, 'b' => 98)
dict = Dict(c => Int(c) for c = 'a':'d')
dict['é'] = 233; dict
emptydict = Dict()
dict["a"] = 1
typeof(dict)
function binarysearch(lst::Vector{T}, val::T) where T
low = 1
high = length(lst)
while low ≤ high
mid = (low + high) ÷ 2
if lst[mid] > val
high = mid - 1
elseif lst[mid] < val
low = mid + 1
else
return mid
end
end
return 0
end
for i in one(Int64):typemax(Int64)
print(oct(i), " ")
sleep(0.1)
end
using Printf
struct Digraph{T <: Real,U}
edges::Dict{Tuple{U,U},T}
verts::Set{U}
end
function Digraph(edges::Vector{Tuple{U,U,T}}) where {T <: Real,U}
vnames = Set{U}(v for edge in edges for v in edge[1:2])
adjmat = Dict((edge[1], edge[2]) => edge[3] for edge in edges)
return Digraph(adjmat, vnames)
end
vertices(g::Digraph) = g.verts
edges(g::Digraph)    = g.edges
neighbours(g::Digraph, v) = Set((b, c) for ((a, b), c) in edges(g) if a == v)
function dijkstrapath(g::Digraph{T,U}, source::U, dest::U) where {T, U}
@assert source ∈ vertices(g) "$source is not a vertex in the graph"
if source == dest return [source], 0 end
inf  = typemax(T)
dist = Dict(v => inf for v in vertices(g))
prev = Dict(v => v   for v in vertices(g))
dist[source] = 0
Q = copy(vertices(g))
neigh = Dict(v => neighbours(g, v) for v in vertices(g))
while !isempty(Q)
u = reduce((x, y) -> dist[x] < dist[y] ? x : y, Q)
pop!(Q, u)
if dist[u] == inf || u == dest break end
for (v, cost) in neigh[u]
alt = dist[u] + cost
if alt < dist[v]
dist[v] = alt
prev[v] = u
end
end
end
rst, cost = U[], dist[dest]
if prev[dest] == dest
return rst, cost
else
while dest != source
pushfirst!(rst, dest)
dest = prev[dest]
end
pushfirst!(rst, dest)
return rst, cost
end
end
const testgraph = [("a", "b", 7),  ("a", "c", 9),  ("a", "f", 14), ("b", "c", 10),
function testpaths()
g = Digraph(testgraph)
src, dst = "a", "e"
path, cost = dijkstrapath(g, src, dst)
println("Shortest path from $src to $dst: ", isempty(path) ?
"no possible path" : join(path, " → "), " (cost $cost)")
@printf("\n%4s | %3s | %s\n", "src", "dst", "path")
for src in vertices(g), dst in vertices(g)
path, cost = dijkstrapath(g, src, dst)
@printf("%4s | %3s | %s\n", src, dst, isempty(path) ? "no possible path" : join(path, " → ") * " ($cost)")
end
end
testpaths()
factorial(n)
Factorial of n. If n is an Integer, the factorial is computed as an integer (promoted to at
least 64 bits). Note that this may overflow if n is not small, but you can use factorial(big(n))
to compute the result exactly in arbitrary precision. If n is not an Integer, factorial(n) is
equivalent to gamma(n+1).
720
for i in 1:100
if i % 15 == 0
println("FizzBuzz")
elseif i % 3 == 0
println("Fizz")
elseif i % 5 == 0
println("Buzz")
else
println(i)
end
end
function multiply(a::Number, b::Number)
return a * b
end
abstract type HuffmanTree end
struct HuffmanLeaf <: HuffmanTree
ch::Char
freq::Int
end
struct HuffmanNode <: HuffmanTree
freq::Int
left::HuffmanTree
right::HuffmanTree
end
function makefreqdict(s::String)
d = Dict{Char, Int}()
for c in s
if !haskey(d, c)
d[c] = 1
else
d[c] += 1
end
end
d
end
function huffmantree(ftable::Dict)
trees::Vector{HuffmanTree} = [HuffmanLeaf(ch, fq) for (ch, fq) in ftable]
while length(trees) > 1
sort!(trees, lt = (x, y) -> x.freq < y.freq, rev = true)
least = pop!(trees)
nextleast = pop!(trees)
push!(trees, HuffmanNode(least.freq + nextleast.freq, least, nextleast))
end
trees[1]
end
printencoding(lf::HuffmanLeaf, code) = println(lf.ch == ' ' ? "space" : lf.ch, "\t", lf.freq, "\t", code)
function printencoding(nd::HuffmanNode, code)
code *= '0'
printencoding(nd.left, code)
code = code[1:end-1]
code *= '1'
printencoding(nd.right, code)
code = code[1:end-1]
end
const msg = "this is an example for huffman encoding"
println("Char\tFreq\tHuffman code")
printencoding(huffmantree(makefreqdict(msg)), "")
for i in 1:5
for j in 1:i
print("*")
end
println()
end
n = 1024
while n > 0
println(n)
n >>= 1
end
function mergesort(arr::Vector)
if length(arr) ≤ 1 return arr end
mid = length(arr) ÷ 2
lpart = mergesort(arr[1:mid])
rpart = mergesort(arr[mid+1:end])
rst = similar(arr)
i = ri = li = 1
@inbounds while li ≤ length(lpart) && ri ≤ length(rpart)
if lpart[li] ≤ rpart[ri]
rst[i] = lpart[li]
li += 1
else
rst[i] = rpart[ri]
ri += 1
end
i += 1
end
if li ≤ length(lpart)
copyto!(rst, i, lpart, li)
else
copyto!(rst, i, rpart, ri)
end
return rst
end
v = rand(-10:10, 10)
println("
using Printf
for i=1:12, j=0:12
if j == 0
@printf("%2d | ", i)
elseif i <= j
@printf("%3d%c", i * j, j == 12 ? '\n' : ' ')
else
print("    ")
end
end
palindrome(s) = s == reverse(s)
[9719=>1,431=>1,2099863=>1]
sort!(A, alg=QuickSort)
s = "I am a string"
if ismatch(r"string$", s)
println("'$s' ends with 'string'")
end
s = "hello"
println(s * " there!")
18
55
julia +([1,2,3]...)
6
192
function solve(n::Integer, from::Integer, to::Integer, via::Integer)
if n == 1
println("Move disk from $from to $to")
else
solve(n - 1, from, via, to)
solve(1, from, to, via)
solve(n - 1, via, to, from)
end
end
solve(4, 1, 2, 3)for i = 99:-1:1 print("\n$i bottles of beer on the wall\n$i bottles of beer\nTake one down, pass it around\n$(i-1) bottles of beer on the wall\n") end
function arithmetic (a = parse(Int, readline()), b = parse(Int, readline()))
for op in  [+,-,*,div,rem]
println("a $op b = $(op(a,b))")
end
end
ab = [a;b]
ab = vcat(a,b)
ab = hcat(a,b)
append!(a,b)
dict = Dict('a' => 97, 'b' => 98)
dict = Dict(c => Int(c) for c = 'a':'d')
dict['é'] = 233; dict
emptydict = Dict()
dict["a"] = 1
typeof(dict)
function binarysearch(lst::Vector{T}, val::T) where T
low = 1
high = length(lst)
while low ≤ high
mid = (low + high) ÷ 2
if lst[mid] > val
high = mid - 1
elseif lst[mid] < val
low = mid + 1
else
return mid
end
end
return 0
end
for i in one(Int64):typemax(Int64)
print(oct(i), " ")
sleep(0.1)
end
using Printf
struct Digraph{T <: Real,U}
edges::Dict{Tuple{U,U},T}
verts::Set{U}
end
function Digraph(edges::Vector{Tuple{U,U,T}}) where {T <: Real,U}
vnames = Set{U}(v for edge in edges for v in edge[1:2])
adjmat = Dict((edge[1], edge[2]) => edge[3] for edge in edges)
return Digraph(adjmat, vnames)
end
vertices(g::Digraph) = g.verts
edges(g::Digraph)    = g.edges
neighbours(g::Digraph, v) = Set((b, c) for ((a, b), c) in edges(g) if a == v)
function dijkstrapath(g::Digraph{T,U}, source::U, dest::U) where {T, U}
@assert source ∈ vertices(g) "$source is not a vertex in the graph"
if source == dest return [source], 0 end
inf  = typemax(T)
dist = Dict(v => inf for v in vertices(g))
prev = Dict(v => v   for v in vertices(g))
dist[source] = 0
Q = copy(vertices(g))
neigh = Dict(v => neighbours(g, v) for v in vertices(g))
while !isempty(Q)
u = reduce((x, y) -> dist[x] < dist[y] ? x : y, Q)
pop!(Q, u)
if dist[u] == inf || u == dest break end
for (v, cost) in neigh[u]
alt = dist[u] + cost
if alt < dist[v]
dist[v] = alt
prev[v] = u
end
end
end
rst, cost = U[], dist[dest]
if prev[dest] == dest
return rst, cost
else
while dest != source
pushfirst!(rst, dest)
dest = prev[dest]
end
pushfirst!(rst, dest)
return rst, cost
end
end
const testgraph = [("a", "b", 7),  ("a", "c", 9),  ("a", "f", 14), ("b", "c", 10),
function testpaths()
g = Digraph(testgraph)
src, dst = "a", "e"
path, cost = dijkstrapath(g, src, dst)
println("Shortest path from $src to $dst: ", isempty(path) ?
"no possible path" : join(path, " → "), " (cost $cost)")
@printf("\n%4s | %3s | %s\n", "src", "dst", "path")
for src in vertices(g), dst in vertices(g)
path, cost = dijkstrapath(g, src, dst)
@printf("%4s | %3s | %s\n", src, dst, isempty(path) ? "no possible path" : join(path, " → ") * " ($cost)")
end
end
testpaths()
factorial(n)
Factorial of n. If n is an Integer, the factorial is computed as an integer (promoted to at
least 64 bits). Note that this may overflow if n is not small, but you can use factorial(big(n))
to compute the result exactly in arbitrary precision. If n is not an Integer, factorial(n) is
equivalent to gamma(n+1).
720
for i in 1:100
if i % 15 == 0
println("FizzBuzz")
elseif i % 3 == 0
println("Fizz")
elseif i % 5 == 0
println("Buzz")
else
println(i)
end
end
function multiply(a::Number, b::Number)
return a * b
end
abstract type HuffmanTree end
struct HuffmanLeaf <: HuffmanTree
ch::Char
freq::Int
end
struct HuffmanNode <: HuffmanTree
freq::Int
left::HuffmanTree
right::HuffmanTree
end
function makefreqdict(s::String)
d = Dict{Char, Int}()
for c in s
if !haskey(d, c)
d[c] = 1
else
d[c] += 1
end
end
d
end
function huffmantree(ftable::Dict)
trees::Vector{HuffmanTree} = [HuffmanLeaf(ch, fq) for (ch, fq) in ftable]
while length(trees) > 1
sort!(trees, lt = (x, y) -> x.freq < y.freq, rev = true)
least = pop!(trees)
nextleast = pop!(trees)
push!(trees, HuffmanNode(least.freq + nextleast.freq, least, nextleast))
end
trees[1]
end
printencoding(lf::HuffmanLeaf, code) = println(lf.ch == ' ' ? "space" : lf.ch, "\t", lf.freq, "\t", code)
function printencoding(nd::HuffmanNode, code)
code *= '0'
printencoding(nd.left, code)
code = code[1:end-1]
code *= '1'
printencoding(nd.right, code)
code = code[1:end-1]
end
const msg = "this is an example for huffman encoding"
println("Char\tFreq\tHuffman code")
printencoding(huffmantree(makefreqdict(msg)), "")
for i in 1:5
for j in 1:i
print("*")
end
println()
end
n = 1024
while n > 0
println(n)
n >>= 1
end
function mergesort(arr::Vector)
if length(arr) ≤ 1 return arr end
mid = length(arr) ÷ 2
lpart = mergesort(arr[1:mid])
rpart = mergesort(arr[mid+1:end])
rst = similar(arr)
i = ri = li = 1
@inbounds while li ≤ length(lpart) && ri ≤ length(rpart)
if lpart[li] ≤ rpart[ri]
rst[i] = lpart[li]
li += 1
else
rst[i] = rpart[ri]
ri += 1
end
i += 1
end
if li ≤ length(lpart)
copyto!(rst, i, lpart, li)
else
copyto!(rst, i, rpart, ri)
end
return rst
end
v = rand(-10:10, 10)
println("
using Printf
for i=1:12, j=0:12
if j == 0
@printf("%2d | ", i)
elseif i <= j
@printf("%3d%c", i * j, j == 12 ? '\n' : ' ')
else
print("    ")
end
end
palindrome(s) = s == reverse(s)
[9719=>1,431=>1,2099863=>1]
sort!(A, alg=QuickSort)
s = "I am a string"
if ismatch(r"string$", s)
println("'$s' ends with 'string'")
end
s = "hello"
println(s * " there!")
18
55
julia +([1,2,3]...)
6
192
function solve(n::Integer, from::Integer, to::Integer, via::Integer)
if n == 1
println("Move disk from $from to $to")
else
solve(n - 1, from, via, to)
solve(1, from, to, via)
solve(n - 1, via, to, from)
end
end
solve(4, 1, 2, 3)for i = 99:-1:1 print("\n$i bottles of beer on the wall\n$i bottles of beer\nTake one down, pass it around\n$(i-1) bottles of beer on the wall\n") end
function arithmetic (a = parse(Int, readline()), b = parse(Int, readline()))
for op in  [+,-,*,div,rem]
println("a $op b = $(op(a,b))")
end
end
ab = [a;b]
ab = vcat(a,b)
ab = hcat(a,b)
append!(a,b)
dict = Dict('a' => 97, 'b' => 98)
dict = Dict(c => Int(c) for c = 'a':'d')
dict['é'] = 233; dict
emptydict = Dict()
dict["a"] = 1
typeof(dict)
function binarysearch(lst::Vector{T}, val::T) where T
low = 1
high = length(lst)
while low ≤ high
mid = (low + high) ÷ 2
if lst[mid] > val
high = mid - 1
elseif lst[mid] < val
low = mid + 1
else
return mid
end
end
return 0
end
for i in one(Int64):typemax(Int64)
print(oct(i), " ")
sleep(0.1)
end
using Printf
struct Digraph{T <: Real,U}
edges::Dict{Tuple{U,U},T}
verts::Set{U}
end
function Digraph(edges::Vector{Tuple{U,U,T}}) where {T <: Real,U}
vnames = Set{U}(v for edge in edges for v in edge[1:2])
adjmat = Dict((edge[1], edge[2]) => edge[3] for edge in edges)
return Digraph(adjmat, vnames)
end
vertices(g::Digraph) = g.verts
edges(g::Digraph)    = g.edges
neighbours(g::Digraph, v) = Set((b, c) for ((a, b), c) in edges(g) if a == v)
function dijkstrapath(g::Digraph{T,U}, source::U, dest::U) where {T, U}
@assert source ∈ vertices(g) "$source is not a vertex in the graph"
if source == dest return [source], 0 end
inf  = typemax(T)
dist = Dict(v => inf for v in vertices(g))
prev = Dict(v => v   for v in vertices(g))
dist[source] = 0
Q = copy(vertices(g))
neigh = Dict(v => neighbours(g, v) for v in vertices(g))
while !isempty(Q)
u = reduce((x, y) -> dist[x] < dist[y] ? x : y, Q)
pop!(Q, u)
if dist[u] == inf || u == dest break end
for (v, cost) in neigh[u]
alt = dist[u] + cost
if alt < dist[v]
dist[v] = alt
prev[v] = u
end
end
end
rst, cost = U[], dist[dest]
if prev[dest] == dest
return rst, cost
else
while dest != source
pushfirst!(rst, dest)
dest = prev[dest]
end
pushfirst!(rst, dest)
return rst, cost
end
end
const testgraph = [("a", "b", 7),  ("a", "c", 9),  ("a", "f", 14), ("b", "c", 10),
function testpaths()
g = Digraph(testgraph)
src, dst = "a", "e"
path, cost = dijkstrapath(g, src, dst)
println("Shortest path from $src to $dst: ", isempty(path) ?
"no possible path" : join(path, " → "), " (cost $cost)")
@printf("\n%4s | %3s | %s\n", "src", "dst", "path")
for src in vertices(g), dst in vertices(g)
path, cost = dijkstrapath(g, src, dst)
@printf("%4s | %3s | %s\n", src, dst, isempty(path) ? "no possible path" : join(path, " → ") * " ($cost)")
end
end
testpaths()
factorial(n)
Factorial of n. If n is an Integer, the factorial is computed as an integer (promoted to at
least 64 bits). Note that this may overflow if n is not small, but you can use factorial(big(n))
to compute the result exactly in arbitrary precision. If n is not an Integer, factorial(n) is
equivalent to gamma(n+1).
720
for i in 1:100
if i % 15 == 0
println("FizzBuzz")
elseif i % 3 == 0
println("Fizz")
elseif i % 5 == 0
println("Buzz")
else
println(i)
end
end
function multiply(a::Number, b::Number)
return a * b
end
abstract type HuffmanTree end
struct HuffmanLeaf <: HuffmanTree
ch::Char
freq::Int
end
struct HuffmanNode <: HuffmanTree
freq::Int
left::HuffmanTree
right::HuffmanTree
end
function makefreqdict(s::String)
d = Dict{Char, Int}()
for c in s
if !haskey(d, c)
d[c] = 1
else
d[c] += 1
end
end
d
end
function huffmantree(ftable::Dict)
trees::Vector{HuffmanTree} = [HuffmanLeaf(ch, fq) for (ch, fq) in ftable]
while length(trees) > 1
sort!(trees, lt = (x, y) -> x.freq < y.freq, rev = true)
least = pop!(trees)
nextleast = pop!(trees)
push!(trees, HuffmanNode(least.freq + nextleast.freq, least, nextleast))
end
trees[1]
end
printencoding(lf::HuffmanLeaf, code) = println(lf.ch == ' ' ? "space" : lf.ch, "\t", lf.freq, "\t", code)
function printencoding(nd::HuffmanNode, code)
code *= '0'
printencoding(nd.left, code)
code = code[1:end-1]
code *= '1'
printencoding(nd.right, code)
code = code[1:end-1]
end
const msg = "this is an example for huffman encoding"
println("Char\tFreq\tHuffman code")
printencoding(huffmantree(makefreqdict(msg)), "")
for i in 1:5
for j in 1:i
print("*")
end
println()
end
n = 1024
while n > 0
println(n)
n >>= 1
end
function mergesort(arr::Vector)
if length(arr) ≤ 1 return arr end
mid = length(arr) ÷ 2
lpart = mergesort(arr[1:mid])
rpart = mergesort(arr[mid+1:end])
rst = similar(arr)
i = ri = li = 1
@inbounds while li ≤ length(lpart) && ri ≤ length(rpart)
if lpart[li] ≤ rpart[ri]
rst[i] = lpart[li]
li += 1
else
rst[i] = rpart[ri]
ri += 1
end
i += 1
end
if li ≤ length(lpart)
copyto!(rst, i, lpart, li)
else
copyto!(rst, i, rpart, ri)
end
return rst
end
v = rand(-10:10, 10)
println("
using Printf
for i=1:12, j=0:12
if j == 0
@printf("%2d | ", i)
elseif i <= j
@printf("%3d%c", i * j, j == 12 ? '\n' : ' ')
else
print("    ")
end
end
palindrome(s) = s == reverse(s)
[9719=>1,431=>1,2099863=>1]
sort!(A, alg=QuickSort)
s = "I am a string"
if ismatch(r"string$", s)
println("'$s' ends with 'string'")
end
s = "hello"
println(s * " there!")
18
55
julia +([1,2,3]...)
6
192
function solve(n::Integer, from::Integer, to::Integer, via::Integer)
if n == 1
println("Move disk from $from to $to")
else
solve(n - 1, from, via, to)
solve(1, from, to, via)
solve(n - 1, via, to, from)
end
end
solve(4, 1, 2, 3)for i = 99:-1:1 print("\n$i bottles of beer on the wall\n$i bottles of beer\nTake one down, pass it around\n$(i-1) bottles of beer on the wall\n") end
function arithmetic (a = parse(Int, readline()), b = parse(Int, readline()))
for op in  [+,-,*,div,rem]
println("a $op b = $(op(a,b))")
end
end
ab = [a;b]
ab = vcat(a,b)
ab = hcat(a,b)
append!(a,b)
dict = Dict('a' => 97, 'b' => 98)
dict = Dict(c => Int(c) for c = 'a':'d')
dict['é'] = 233; dict
emptydict = Dict()
dict["a"] = 1
typeof(dict)
function binarysearch(lst::Vector{T}, val::T) where T
low = 1
high = length(lst)
while low ≤ high
mid = (low + high) ÷ 2
if lst[mid] > val
high = mid - 1
elseif lst[mid] < val
low = mid + 1
else
return mid
end
end
return 0
end
for i in one(Int64):typemax(Int64)
print(oct(i), " ")
sleep(0.1)
end
using Printf
struct Digraph{T <: Real,U}
edges::Dict{Tuple{U,U},T}
verts::Set{U}
end
function Digraph(edges::Vector{Tuple{U,U,T}}) where {T <: Real,U}
vnames = Set{U}(v for edge in edges for v in edge[1:2])
adjmat = Dict((edge[1], edge[2]) => edge[3] for edge in edges)
return Digraph(adjmat, vnames)
end
vertices(g::Digraph) = g.verts
edges(g::Digraph)    = g.edges
neighbours(g::Digraph, v) = Set((b, c) for ((a, b), c) in edges(g) if a == v)
function dijkstrapath(g::Digraph{T,U}, source::U, dest::U) where {T, U}
@assert source ∈ vertices(g) "$source is not a vertex in the graph"
if source == dest return [source], 0 end
inf  = typemax(T)
dist = Dict(v => inf for v in vertices(g))
prev = Dict(v => v   for v in vertices(g))
dist[source] = 0
Q = copy(vertices(g))
neigh = Dict(v => neighbours(g, v) for v in vertices(g))
while !isempty(Q)
u = reduce((x, y) -> dist[x] < dist[y] ? x : y, Q)
pop!(Q, u)
if dist[u] == inf || u == dest break end
for (v, cost) in neigh[u]
alt = dist[u] + cost
if alt < dist[v]
dist[v] = alt
prev[v] = u
end
end
end
rst, cost = U[], dist[dest]
if prev[dest] == dest
return rst, cost
else
while dest != source
pushfirst!(rst, dest)
dest = prev[dest]
end
pushfirst!(rst, dest)
return rst, cost
end
end
const testgraph = [("a", "b", 7),  ("a", "c", 9),  ("a", "f", 14), ("b", "c", 10),
function testpaths()
g = Digraph(testgraph)
src, dst = "a", "e"
path, cost = dijkstrapath(g, src, dst)
println("Shortest path from $src to $dst: ", isempty(path) ?
"no possible path" : join(path, " → "), " (cost $cost)")
@printf("\n%4s | %3s | %s\n", "src", "dst", "path")
for src in vertices(g), dst in vertices(g)
path, cost = dijkstrapath(g, src, dst)
@printf("%4s | %3s | %s\n", src, dst, isempty(path) ? "no possible path" : join(path, " → ") * " ($cost)")
end
end
testpaths()
factorial(n)
Factorial of n. If n is an Integer, the factorial is computed as an integer (promoted to at
least 64 bits). Note that this may overflow if n is not small, but you can use factorial(big(n))
to compute the result exactly in arbitrary precision. If n is not an Integer, factorial(n) is
equivalent to gamma(n+1).
720
for i in 1:100
if i % 15 == 0
println("FizzBuzz")
elseif i % 3 == 0
println("Fizz")
elseif i % 5 == 0
println("Buzz")
else
println(i)
end
end
function multiply(a::Number, b::Number)
return a * b
end
abstract type HuffmanTree end
struct HuffmanLeaf <: HuffmanTree
ch::Char
freq::Int
end
struct HuffmanNode <: HuffmanTree
freq::Int
left::HuffmanTree
right::HuffmanTree
end
function makefreqdict(s::String)
d = Dict{Char, Int}()
for c in s
if !haskey(d, c)
d[c] = 1
else
d[c] += 1
end
end
d
end
function huffmantree(ftable::Dict)
trees::Vector{HuffmanTree} = [HuffmanLeaf(ch, fq) for (ch, fq) in ftable]
while length(trees) > 1
sort!(trees, lt = (x, y) -> x.freq < y.freq, rev = true)
least = pop!(trees)
nextleast = pop!(trees)
push!(trees, HuffmanNode(least.freq + nextleast.freq, least, nextleast))
end
trees[1]
end
printencoding(lf::HuffmanLeaf, code) = println(lf.ch == ' ' ? "space" : lf.ch, "\t", lf.freq, "\t", code)
function printencoding(nd::HuffmanNode, code)
code *= '0'
printencoding(nd.left, code)
code = code[1:end-1]
code *= '1'
printencoding(nd.right, code)
code = code[1:end-1]
end
const msg = "this is an example for huffman encoding"
println("Char\tFreq\tHuffman code")
printencoding(huffmantree(makefreqdict(msg)), "")
for i in 1:5
for j in 1:i
print("*")
end
println()
end
n = 1024
while n > 0
println(n)
n >>= 1
end
function mergesort(arr::Vector)
if length(arr) ≤ 1 return arr end
mid = length(arr) ÷ 2
lpart = mergesort(arr[1:mid])
rpart = mergesort(arr[mid+1:end])
rst = similar(arr)
i = ri = li = 1
@inbounds while li ≤ length(lpart) && ri ≤ length(rpart)
if lpart[li] ≤ rpart[ri]
rst[i] = lpart[li]
li += 1
else
rst[i] = rpart[ri]
ri += 1
end
i += 1
end
if li ≤ length(lpart)
copyto!(rst, i, lpart, li)
else
copyto!(rst, i, rpart, ri)
end
return rst
end
v = rand(-10:10, 10)
println("
using Printf
for i=1:12, j=0:12
if j == 0
@printf("%2d | ", i)
elseif i <= j
@printf("%3d%c", i * j, j == 12 ? '\n' : ' ')
else
print("    ")
end
end
palindrome(s) = s == reverse(s)
[9719=>1,431=>1,2099863=>1]
sort!(A, alg=QuickSort)
s = "I am a string"
if ismatch(r"string$", s)
println("'$s' ends with 'string'")
end
s = "hello"
println(s * " there!")
18
55
julia +([1,2,3]...)
6
192
function solve(n::Integer, from::Integer, to::Integer, via::Integer)
if n == 1
println("Move disk from $from to $to")
else
solve(n - 1, from, via, to)
solve(1, from, to, via)
solve(n - 1, via, to, from)
end
end
solve(4, 1, 2, 3)for i = 99:-1:1 print("\n$i bottles of beer on the wall\n$i bottles of beer\nTake one down, pass it around\n$(i-1) bottles of beer on the wall\n") end
function arithmetic (a = parse(Int, readline()), b = parse(Int, readline()))
for op in  [+,-,*,div,rem]
println("a $op b = $(op(a,b))")
end
end
ab = [a;b]
ab = vcat(a,b)
ab = hcat(a,b)
append!(a,b)
dict = Dict('a' => 97, 'b' => 98)
dict = Dict(c => Int(c) for c = 'a':'d')
dict['é'] = 233; dict
emptydict = Dict()
dict["a"] = 1
typeof(dict)
function binarysearch(lst::Vector{T}, val::T) where T
low = 1
high = length(lst)
while low ≤ high
mid = (low + hi