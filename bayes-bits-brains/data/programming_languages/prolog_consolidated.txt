print_expression_and_result(M, N, Operator) :-
Expression =.. [Operator, M, N],
Result is Expression,
format('~w ~8|is ~d~n', [Expression, Result]).
arithmetic_integer :-
read(M),
read(N),
maplist( print_expression_and_result(M, N), [+,-,*,//,rem,^] ).
mymap(key1,value1).
mymap(key2,value2).
V = value1
bin_search(Elt,List,Result):-
length(List,N), bin_search_inner(Elt,List,1,N,Result).
bin_search_inner(Elt,List,J,J,J):-
nth(J,List,Elt).
bin_search_inner(Elt,List,Begin,End,Mid):-
Begin < End,
Mid is (Begin+End) div 2,
nth(Mid,List,Elt).
bin_search_inner(Elt,List,Begin,End,Result):-
Begin < End,
Mid is (Begin+End) div 2,
nth(Mid,List,MidElt),
MidElt < Elt,
NewBegin is Mid+1,
bin_search_inner(Elt,List,NewBegin,End,Result).
bin_search_inner(Elt,List,Begin,End,Result):-
Begin < End,
Mid is (Begin+End) div 2,
nth(Mid,List,MidElt),
MidElt > Elt,
NewEnd is Mid-1,
bin_search_inner(Elt,List,Begin,NewEnd,Result).
:- use_module(library(clpfd)).
caesar :-
L1 = "The five boxing wizards jump quickly",
writef("Original :
encoding(3, L1, L2) ,
writef("Encoding :
encoding(3, L3, L2),
writef("Decoding :
encoding(Key, L1, L2) :-
maplist(caesar_cipher(Key), L1, L2).
caesar_cipher(_, 32, 32) :- !.
caesar_cipher(Key, V1, V2) :-
V #= Key + V1,
((V1 #=< 0'Z #/\ V #> 0'Z) #\/ (V1 #=< 0'z #/\ V #> 0'z)
#\/
(V1 #< 0'A #/\ V2 #>= 0'A)#\/ (V1 #< 0'a #/\ V2 #>= 0'a)) #==> A,
V2 #= V - A * 26,
label([A, V1, V2]).
go :- write('Hello, World!'), nl.
o(O) :- member(O, [0,1,2,3,4,5,6,7]).
octal([O]) :- o(O).
octal([A|B]) :-
octal(O),
o(T),
append(O, [T], [A|B]),
dif(A, 0).
octalize :-
forall(
octal(X),
(maplist(write, X), nl)
).
rpath([target|reversed_path], distance)
fib(1, 1) :- !.
fib(0, 0) :- !.
fib(N, Value) :-
A is N - 1, fib(A, A1),
B is N - 2, fib(B, B1),
Value is A1 + B1.
fizzbuzz :-
forall(between(1, 100, X), print_item(X)).
print_item(X) :-
(  X mod 15 =:= 0
-> write('FizzBuzz')
;  X mod 3 =:= 0
-> write('Fizz')
;  X mod 5 =:= 0
-> write('Buzz')
;  write(X)
),
nl.
multiply(A, B, P) :- P is A * B.
swap(A,B,B,A).
X = 2,
Y = 1.
huffman :-
L = 'this is an example for huffman encoding',
atom_chars(L, LA),
msort(LA, LS),
packList(LS, PL),
sort(PL, PLS),
build_tree(PLS, A),
coding(A, [], C),
sort(C, SC),
format('Symbol~t   Weight~t~30|Code~n'),
maplist(print_code, SC).
build_tree([[V1|R1], [V2|R2]|T], AF) :-
V is V1 + V2,
A = [V, [V1|R1], [V2|R2]],
(   T=[] -> AF=A ;  sort([A|T], NT), build_tree(NT, AF) ).
coding([_A,FG,FD], Code, CF) :-
(   is_node(FG) ->  coding(FG, [0 | Code], C1)
;  leaf_coding(FG, [0 | Code], C1) ),
(   is_node(FD) ->  coding(FD, [1 | Code], C2)
;  leaf_coding(FD, [1 | Code], C2) ),
append(C1, C2, CF).
leaf_coding([FG,FD], Code, CF) :-
reverse(Code, CodeR),
CF = [[FG, FD, CodeR]] .
is_node([_V, _FG, _FD]).
print_code([N, Car, Code]):-
format('~w :~t~w~t~30|', [Car, N]),
forall(member(V, Code), write(V)),
nl.
packList([], []).
packList([X], [[1,X]]) :- !.
packList([X|Rest], [XRun|Packed]):-
run(X, Rest, XRun, RRest),
packList(RRest, Packed).
run(V, [V|LRest], [N1,V], RRest):-
run(V, LRest, [N, V], RRest),
N1 is N + 1.
run(V, [Other|RRest], [1,V], [Other|RRest]):-
dif(V, Other).
example :-
between(1,5,I), nl, between(1,I,_J),
write('*'), fail.
example.
while(0) :- !.
while(X) :-
writeln(X),
X1 is X // 2,
while(X1).
msort( [], [] ).
msort( [X], [X] ).
msort( U, S ) :- split(U, L, R), msort(L, SL), msort(R, SR), merge(SL, SR, S).
split( [X], [X], [] ).
split( [L,R|T], [L|LT], [R|RT] ) :- split( T, LT, RT ).
merge( [], RS, RS ).
merge( LS, [], LS ).
merge( [L|LS], [R|RS], [L|T] ) :- L =< R, merge(    LS, [R|RS], T).
merge( [L|LS], [R|RS], [R|T] ) :- L > R,  merge( [L|LS],   RS,  T).
make_table(S,E) :-
print_header(S,E),
make_table_rows(S,E),
fail.
make_table(_,_).
print_header(S,E) :-
nl,
write('      '),
forall(between(S,E,X), print_num(X)),
nl,
Sp is E * 4 + 2,
write('    '),
forall(between(1,Sp,_), write('-')).
make_table_rows(S,E) :-
between(S,E,N),
nl,
print_num(N), write(': '),
between(S,E,N2),
X is N * N2,
print_row_item(N,N2,X).
print_row_item(N, N2, _) :-
N2 < N,
write('    ').
print_row_item(N, N2, X) :-
N2 >= N,
print_num(X).
print_num(X) :- X < 10,	          format('   ~p', X).
print_num(X) :- between(10,99,X), format('  ~p', X).
print_num(X) :- X > 99,	          format(' ~p', X).
palindrome(Word) :- name(Word,List), reverse(List,List).
prime_decomp(N, L) :-
SN is sqrt(N),
prime_decomp_1(N, SN, 2, [], L).
prime_decomp_1(1, _, _, L, L) :- !.
prime_decomp_1(N, SN, D, L, LF) :-
(   0 is N mod D ->
Q is N / D,
SQ is sqrt(Q),
prime_decomp_1(Q, SQ, D, [D |L], LF)
;
D1 is D+1,
LF = [N |L]
;
prime_decomp_2(N, SN, D1, L, LF)
)
).
prime_decomp_2(1, _, _, L, L) :- !.
prime_decomp_2(N, SN, D, L, LF) :-
(   0 is N mod D ->
Q is N / D,
SQ is sqrt(Q),
prime_decomp_2(Q, SQ, D, [D |L], LF);
D1 is D+2,
LF = [N |L]
;
prime_decomp_2(N, SN, D1, L, LF)
)
).
qsort( [], [] ).
qsort( [H|U], S ) :- splitBy(H, U, L, R), qsort(L, SL), qsort(R, SR), append(SL, [H|SR], S).
splitBy( H, [U|T], [U|LS], RS ) :- U =< H, splitBy(H, T, LS, RS).
splitBy( H, [U|T], LS, [U|RS] ) :- U  > H, splitBy(H, T, LS, RS).
reverse("abcd", L), string_to_list(S,L).
sum([],0).
sum([H|T],X) :- sum(T,Y), X is H + Y.
product([],1).
product([H|T],X) :- product(T,Y), X is H * X.
hanoi(N) :- move(N,left,center,right).
move(N,A,B,C) :-
M is N-1,
move(M,A,C,B),
inform(A,B),
move(M,C,B,A).
inform(X,Y) :- write([move,a,disk,from,the,X,pole,to,Y,pole]), nl.