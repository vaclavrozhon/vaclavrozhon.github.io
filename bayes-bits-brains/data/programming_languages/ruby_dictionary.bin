plural = 's'
99.downto(1) do |i|
puts "
puts "
puts "Take one down, pass it around!"
plural = '' if i - 1 == 1
if i > 1
puts "
puts
else
puts "No more bottles of beer on the wall!"
end
end
puts 'Enter x and y'
x = gets.to_i
y = gets.to_i
puts "Sum:
"Difference:
"Product:
"Quotient:
"Quotient:
"Remainder:
"Exponentiation:
"Quotient: %d with Remainder: %d" % x.divmod(y)
arr1 = [1, 2, 3]
arr2 = [4, 5, 6]
arr3 = [7, 8, 9]
arr4 = arr1 + arr2
arr4.concat(arr3)
class Array
def binary_search(val, low=0, high=(length - 1))
return nil if high < low
mid = (low + high) >> 1
case val <=> self[mid]
when -1
binary_search(val, low, mid - 1)
when 1
binary_search(val, mid + 1, high)
else mid
end
end
end
[0,42,45,24324,99999].each do |val|
i = ary.binary_search(val)
if i
puts "found
else
puts "
end
end
class String
ALFABET = ("A".."Z").to_a
def caesar_cipher(num)
self.tr(ALFABET.join, ALFABET.rotate(num).join)
end
end
encypted  = "THEYBROKEOURCIPHEREVERYONECANREADTHIS".caesar_cipher(3)
decrypted = encypted.caesar_cipher(-3)
n = 0
loop do
puts "%o" % n
n += 1
end
for n in (0..)
puts n.to_s(8)
end
0.upto(1/0.0) do |n|
printf "%o\n", n
end
0.step do |n|
puts format("%o", n)
end
class Graph
Vertex = Struct.new(:name, :neighbours, :dist, :prev)
def initialize(graph)
@vertices = Hash.new{|h,k| h[k]=Vertex.new(k,[],Float::INFINITY)}
@edges = {}
graph.each do |(v1, v2, dist)|
@vertices[v1].neighbours << v2
@vertices[v2].neighbours << v1
@edges[[v1, v2]] = @edges[[v2, v1]] = dist
end
@dijkstra_source = nil
end
def dijkstra(source)
return  if @dijkstra_source == source
q = @vertices.values
q.each do |v|
v.dist = Float::INFINITY
v.prev = nil
end
@vertices[source].dist = 0
until q.empty?
u = q.min_by {|vertex| vertex.dist}
break if u.dist == Float::INFINITY
q.delete(u)
u.neighbours.each do |v|
vv = @vertices[v]
if q.include?(vv)
alt = u.dist + @edges[[u.name, v]]
if alt < vv.dist
vv.dist = alt
vv.prev = u.name
end
end
end
end
@dijkstra_source = source
end
def shortest_path(source, target)
dijkstra(source)
path = []
u = target
while u
path.unshift(u)
u = @vertices[u].prev
end
return path, @vertices[target].dist
end
def to_s
"
end
end
g = Graph.new([ [:a, :b, 7],
])
start, stop = :a, :e
path, dist = g.shortest_path(start, stop)
puts "shortest path from
puts path.join(" -> ")
def factorial_recursive(n)
n.zero? ? 1 : n * factorial_recursive(n - 1)
end
def factorial_tail_recursive(n, prod = 1)
n.zero? ? prod : factorial_tail_recursive(n - 1, prod * n)
end
def factorial_iterative(n)
(2...n).each { |i| n *= i }
n.zero? ? 1 : n
end
def factorial_inject(n)
(1..n).inject(1){ |prod, i| prod * i }
end
def factorial_reduce(n)
(2..n).reduce(1, :*)
end
require 'benchmark'
n = 400
m = 10000
Benchmark.bm(16) do |b|
b.report('recursive:')       {m.times {factorial_recursive(n)}}
b.report('tail recursive:')  {m.times {factorial_tail_recursive(n)}}
b.report('iterative:')       {m.times {factorial_iterative(n)}}
b.report('inject:')          {m.times {factorial_inject(n)}}
b.report('reduce:')          {m.times {factorial_reduce(n)}}
end
1.upto(100) do |n|
print "Fizz" if a = (n % 3).zero?
print "Buzz" if b = (n % 5).zero?
print n unless (a || b)
puts
end
def multiply(a, b)
a * b
end
def swap(a, b)
return b, a
end
40902.gcd(24140)
require 'priority_queue'
def huffman_encoding(str)
char_count = Hash.new(0)
str.each_char {|c| char_count[c] += 1}
pq = CPriorityQueue.new
char_count.each {|char, count| pq.push(char, count)}
while pq.length > 1
key1, prio1 = pq.delete_min
key2, prio2 = pq.delete_min
pq.push([key1, key2], prio1 + prio2)
end
Hash[*generate_encoding(pq.min_key)]
end
def generate_encoding(ary, prefix="")
case ary
when Array
generate_encoding(ary[0], "
else
[ary, prefix]
end
end
def encode(str, encoding)
str.each_char.collect {|char| encoding[char]}.join
end
def decode(encoded, encoding)
rev_enc = encoding.invert
decoded = ""
pos = 0
while pos < encoded.length
key = ""
while rev_enc[key].nil?
key << encoded[pos]
pos += 1
end
decoded << rev_enc[key]
end
decoded
end
str = "this is an example for huffman encoding"
encoding = huffman_encoding(str)
encoding.to_a.sort.each {|x| p x}
enc = encode(str, encoding)
dec = decode(enc, encoding)
puts "success!" if str == dec
puts (1..5).map { |i| "*" * i }
i = 1024
while i > 0 do
puts i
i /= 2
end
def merge_sort(m)
return m if m.length <= 1
middle = m.length / 2
left = merge_sort(m[0...middle])
right = merge_sort(m[middle..-1])
merge(left, right)
end
def merge(left, right)
result = []
until left.empty? || right.empty?
result << (left.first<=right.first ? left.shift : right.shift)
end
result + left + right
end
p merge_sort(ary)
def multiplication_table(n)
1.upto(n) do |x|
print "%3d |" % x
1.upto(x-1) {|y| print "    "}
x.upto(n)   {|y| print " %3d" % (x*y)}
puts
end
end
multiplication_table 12
def palindrome?(s)
s == s.reverse
end
class Array
def quick_sort
return self if length <= 1
pivot = self[0]
less, greatereq = self[1..-1].partition { |x| x < pivot }
less.quick_sort + [pivot] + greatereq.quick_sort
end
end
str = "I am a string"
p "Ends with 'string'" if str =~ /string$/
p "Does not start with 'You'" unless str =~ /^You/
str = "asdf"
reversed = str.reverse
"résumé niño".reverse
s = "hello"
puts "
puts s + " literal"
s += " literal"
puts s
s << " another"
puts s
s = "hello"
puts s.concat(" literal")
puts s
puts s.prepend("Alice said: ")
puts s
arr = [1,2,3,4,5]
p sum = arr.inject(0) { |sum, item| sum + item }
p product = arr.inject(1) { |prod, element| prod * element }plural = 's'
99.downto(1) do |i|
puts "
puts "
puts "Take one down, pass it around!"
plural = '' if i - 1 == 1
if i > 1
puts "
puts
else
puts "No more bottles of beer on the wall!"
end
end
puts 'Enter x and y'
x = gets.to_i
y = gets.to_i
puts "Sum:
"Difference:
"Product:
"Quotient:
"Quotient:
"Remainder:
"Exponentiation:
"Quotient: %d with Remainder: %d" % x.divmod(y)
arr1 = [1, 2, 3]
arr2 = [4, 5, 6]
arr3 = [7, 8, 9]
arr4 = arr1 + arr2
arr4.concat(arr3)
class Array
def binary_search(val, low=0, high=(length - 1))
return nil if high < low
mid = (low + high) >> 1
case val <=> self[mid]
when -1
binary_search(val, low, mid - 1)
when 1
binary_search(val, mid + 1, high)
else mid
end
end
end
[0,42,45,24324,99999].each do |val|
i = ary.binary_search(val)
if i
puts "found
else
puts "
end
end
class String
ALFABET = ("A".."Z").to_a
def caesar_cipher(num)
self.tr(ALFABET.join, ALFABET.rotate(num).join)
end
end
encypted  = "THEYBROKEOURCIPHEREVERYONECANREADTHIS".caesar_cipher(3)
decrypted = encypted.caesar_cipher(-3)
n = 0
loop do
puts "%o" % n
n += 1
end
for n in (0..)
puts n.to_s(8)
end
0.upto(1/0.0) do |n|
printf "%o\n", n
end
0.step do |n|
puts format("%o", n)
end
class Graph
Vertex = Struct.new(:name, :neighbours, :dist, :prev)
def initialize(graph)
@vertices = Hash.new{|h,k| h[k]=Vertex.new(k,[],Float::INFINITY)}
@edges = {}
graph.each do |(v1, v2, dist)|
@vertices[v1].neighbours << v2
@vertices[v2].neighbours << v1
@edges[[v1, v2]] = @edges[[v2, v1]] = dist
end
@dijkstra_source = nil
end
def dijkstra(source)
return  if @dijkstra_source == source
q = @vertices.values
q.each do |v|
v.dist = Float::INFINITY
v.prev = nil
end
@vertices[source].dist = 0
until q.empty?
u = q.min_by {|vertex| vertex.dist}
break if u.dist == Float::INFINITY
q.delete(u)
u.neighbours.each do |v|
vv = @vertices[v]
if q.include?(vv)
alt = u.dist + @edges[[u.name, v]]
if alt < vv.dist
vv.dist = alt
vv.prev = u.name
end
end
end
end
@dijkstra_source = source
end
def shortest_path(source, target)
dijkstra(source)
path = []
u = target
while u
path.unshift(u)
u = @vertices[u].prev
end
return path, @vertices[target].dist
end
def to_s
"
end
end
g = Graph.new([ [:a, :b, 7],
])
start, stop = :a, :e
path, dist = g.shortest_path(start, stop)
puts "shortest path from
puts path.join(" -> ")
def factorial_recursive(n)
n.zero? ? 1 : n * factorial_recursive(n - 1)
end
def factorial_tail_recursive(n, prod = 1)
n.zero? ? prod : factorial_tail_recursive(n - 1, prod * n)
end
def factorial_iterative(n)
(2...n).each { |i| n *= i }
n.zero? ? 1 : n
end
def factorial_inject(n)
(1..n).inject(1){ |prod, i| prod * i }
end
def factorial_reduce(n)
(2..n).reduce(1, :*)
end
require 'benchmark'
n = 400
m = 10000
Benchmark.bm(16) do |b|
b.report('recursive:')       {m.times {factorial_recursive(n)}}
b.report('tail recursive:')  {m.times {factorial_tail_recursive(n)}}
b.report('iterative:')       {m.times {factorial_iterative(n)}}
b.report('inject:')          {m.times {factorial_inject(n)}}
b.report('reduce:')          {m.times {factorial_reduce(n)}}
end
1.upto(100) do |n|
print "Fizz" if a = (n % 3).zero?
print "Buzz" if b = (n % 5).zero?
print n unless (a || b)
puts
end
def multiply(a, b)
a * b
end
def swap(a, b)
return b, a
end
40902.gcd(24140)
require 'priority_queue'
def huffman_encoding(str)
char_count = Hash.new(0)
str.each_char {|c| char_count[c] += 1}
pq = CPriorityQueue.new
char_count.each {|char, count| pq.push(char, count)}
while pq.length > 1
key1, prio1 = pq.delete_min
key2, prio2 = pq.delete_min
pq.push([key1, key2], prio1 + prio2)
end
Hash[*generate_encoding(pq.min_key)]
end
def generate_encoding(ary, prefix="")
case ary
when Array
generate_encoding(ary[0], "
else
[ary, prefix]
end
end
def encode(str, encoding)
str.each_char.collect {|char| encoding[char]}.join
end
def decode(encoded, encoding)
rev_enc = encoding.invert
decoded = ""
pos = 0
while pos < encoded.length
key = ""
while rev_enc[key].nil?
key << encoded[pos]
pos += 1
end
decoded << rev_enc[key]
end
decoded
end
str = "this is an example for huffman encoding"
encoding = huffman_encoding(str)
encoding.to_a.sort.each {|x| p x}
enc = encode(str, encoding)
dec = decode(enc, encoding)
puts "success!" if str == dec
puts (1..5).map { |i| "*" * i }
i = 1024
while i > 0 do
puts i
i /= 2
end
def merge_sort(m)
return m if m.length <= 1
middle = m.length / 2
left = merge_sort(m[0...middle])
right = merge_sort(m[middle..-1])
merge(left, right)
end
def merge(left, right)
result = []
until left.empty? || right.empty?
result << (left.first<=right.first ? left.shift : right.shift)
end
result + left + right
end
p merge_sort(ary)
def multiplication_table(n)
1.upto(n) do |x|
print "%3d |" % x
1.upto(x-1) {|y| print "    "}
x.upto(n)   {|y| print " %3d" % (x*y)}
puts
end
end
multiplication_table 12
def palindrome?(s)
s == s.reverse
end
class Array
def quick_sort
return self if length <= 1
pivot = self[0]
less, greatereq = self[1..-1].partition { |x| x < pivot }
less.quick_sort + [pivot] + greatereq.quick_sort
end
end
str = "I am a string"
p "Ends with 'string'" if str =~ /string$/
p "Does not start with 'You'" unless str =~ /^You/
str = "asdf"
reversed = str.reverse
"résumé niño".reverse
s = "hello"
puts "
puts s + " literal"
s += " literal"
puts s
s << " another"
puts s
s = "hello"
puts s.concat(" literal")
puts s
puts s.prepend("Alice said: ")
puts s
arr = [1,2,3,4,5]
p sum = arr.inject(0) { |sum, item| sum + item }
p product = arr.inject(1) { |prod, element| prod * element }plural = 's'
99.downto(1) do |i|
puts "
puts "
puts "Take one down, pass it around!"
plural = '' if i - 1 == 1
if i > 1
puts "
puts
else
puts "No more bottles of beer on the wall!"
end
end
puts 'Enter x and y'
x = gets.to_i
y = gets.to_i
puts "Sum:
"Difference:
"Product:
"Quotient:
"Quotient:
"Remainder:
"Exponentiation:
"Quotient: %d with Remainder: %d" % x.divmod(y)
arr1 = [1, 2, 3]
arr2 = [4, 5, 6]
arr3 = [7, 8, 9]
arr4 = arr1 + arr2
arr4.concat(arr3)
class Array
def binary_search(val, low=0, high=(length - 1))
return nil if high < low
mid = (low + high) >> 1
case val <=> self[mid]
when -1
binary_search(val, low, mid - 1)
when 1
binary_search(val, mid + 1, high)
else mid
end
end
end
[0,42,45,24324,99999].each do |val|
i = ary.binary_search(val)
if i
puts "found
else
puts "
end
end
class String
ALFABET = ("A".."Z").to_a
def caesar_cipher(num)
self.tr(ALFABET.join, ALFABET.rotate(num).join)
end
end
encypted  = "THEYBROKEOURCIPHEREVERYONECANREADTHIS".caesar_cipher(3)
decrypted = encypted.caesar_cipher(-3)
n = 0
loop do
puts "%o" % n
n += 1
end
for n in (0..)
puts n.to_s(8)
end
0.upto(1/0.0) do |n|
printf "%o\n", n
end
0.step do |n|
puts format("%o", n)
end
class Graph
Vertex = Struct.new(:name, :neighbours, :dist, :prev)
def initialize(graph)
@vertices = Hash.new{|h,k| h[k]=Vertex.new(k,[],Float::INFINITY)}
@edges = {}
graph.each do |(v1, v2, dist)|
@vertices[v1].neighbours << v2
@vertices[v2].neighbours << v1
@edges[[v1, v2]] = @edges[[v2, v1]] = dist
end
@dijkstra_source = nil
end
def dijkstra(source)
return  if @dijkstra_source == source
q = @vertices.values
q.each do |v|
v.dist = Float::INFINITY
v.prev = nil
end
@vertices[source].dist = 0
until q.empty?
u = q.min_by {|vertex| vertex.dist}
break if u.dist == Float::INFINITY
q.delete(u)
u.neighbours.each do |v|
vv = @vertices[v]
if q.include?(vv)
alt = u.dist + @edges[[u.name, v]]
if alt < vv.dist
vv.dist = alt
vv.prev = u.name
end
end
end
end
@dijkstra_source = source
end
def shortest_path(source, target)
dijkstra(source)
path = []
u = target
while u
path.unshift(u)
u = @vertices[u].prev
end
return path, @vertices[target].dist
end
def to_s
"
end
end
g = Graph.new([ [:a, :b, 7],
])
start, stop = :a, :e
path, dist = g.shortest_path(start, stop)
puts "shortest path from
puts path.join(" -> ")
def factorial_recursive(n)
n.zero? ? 1 : n * factorial_recursive(n - 1)
end
def factorial_tail_recursive(n, prod = 1)
n.zero? ? prod : factorial_tail_recursive(n - 1, prod * n)
end
def factorial_iterative(n)
(2...n).each { |i| n *= i }
n.zero? ? 1 : n
end
def factorial_inject(n)
(1..n).inject(1){ |prod, i| prod * i }
end
def factorial_reduce(n)
(2..n).reduce(1, :*)
end
require 'benchmark'
n = 400
m = 10000
Benchmark.bm(16) do |b|
b.report('recursive:')       {m.times {factorial_recursive(n)}}
b.report('tail recursive:')  {m.times {factorial_tail_recursive(n)}}
b.report('iterative:')       {m.times {factorial_iterative(n)}}
b.report('inject:')          {m.times {factorial_inject(n)}}
b.report('reduce:')          {m.times {factorial_reduce(n)}}
end
1.upto(100) do |n|
print "Fizz" if a = (n % 3).zero?
print "Buzz" if b = (n % 5).zero?
print n unless (a || b)
puts
end
def multiply(a, b)
a * b
end
def swap(a, b)
return b, a
end
40902.gcd(24140)
require 'priority_queue'
def huffman_encoding(str)
char_count = Hash.new(0)
str.each_char {|c| char_count[c] += 1}
pq = CPriorityQueue.new
char_count.each {|char, count| pq.push(char, count)}
while pq.length > 1
key1, prio1 = pq.delete_min
key2, prio2 = pq.delete_min
pq.push([key1, key2], prio1 + prio2)
end
Hash[*generate_encoding(pq.min_key)]
end
def generate_encoding(ary, prefix="")
case ary
when Array
generate_encoding(ary[0], "
else
[ary, prefix]
end
end
def encode(str, encoding)
str.each_char.collect {|char| encoding[char]}.join
end
def decode(encoded, encoding)
rev_enc = encoding.invert
decoded = ""
pos = 0
while pos < encoded.length
key = ""
while rev_enc[key].nil?
key << encoded[pos]
pos += 1
end
decoded << rev_enc[key]
end
decoded
end
str = "this is an example for huffman encoding"
encoding = huffman_encoding(str)
encoding.to_a.sort.each {|x| p x}
enc = encode(str, encoding)
dec = decode(enc, encoding)
puts "success!" if str == dec
puts (1..5).map { |i| "*" * i }
i = 1024
while i > 0 do
puts i
i /= 2
end
def merge_sort(m)
return m if m.length <= 1
middle = m.length / 2
left = merge_sort(m[0...middle])
right = merge_sort(m[middle..-1])
merge(left, right)
end
def merge(left, right)
result = []
until left.empty? || right.empty?
result << (left.first<=right.first ? left.shift : right.shift)
end
result + left + right
end
p merge_sort(ary)
def multiplication_table(n)
1.upto(n) do |x|
print "%3d |" % x
1.upto(x-1) {|y| print "    "}
x.upto(n)   {|y| print " %3d" % (x*y)}
puts
end
end
multiplication_table 12
def palindrome?(s)
s == s.reverse
end
class Array
def quick_sort
return self if length <= 1
pivot = self[0]
less, greatereq = self[1..-1].partition { |x| x < pivot }
less.quick_sort + [pivot] + greatereq.quick_sort
end
end
str = "I am a string"
p "Ends with 'string'" if str =~ /string$/
p "Does not start with 'You'" unless str =~ /^You/
str = "asdf"
reversed = str.reverse
"résumé niño".reverse
s = "hello"
puts "
puts s + " literal"
s += " literal"
puts s
s << " another"
puts s
s = "hello"
puts s.concat(" literal")
puts s
puts s.prepend("Alice said: ")
puts s
arr = [1,2,3,4,5]
p sum = arr.inject(0) { |sum, item| sum + item }
p product = arr.inject(1) { |prod, element| prod * element }plural = 's'
99.downto(1) do |i|
puts "
puts "
puts "Take one down, pass it around!"
plural = '' if i - 1 == 1
if i > 1
puts "
puts
else
puts "No more bottles of beer on the wall!"
end
end
puts 'Enter x and y'
x = gets.to_i
y = gets.to_i
puts "Sum:
"Difference:
"Product:
"Quotient:
"Quotient:
"Remainder:
"Exponentiation:
"Quotient: %d with Remainder: %d" % x.divmod(y)
arr1 = [1, 2, 3]
arr2 = [4, 5, 6]
arr3 = [7, 8, 9]
arr4 = arr1 + arr2
arr4.concat(arr3)
class Array
def binary_search(val, low=0, high=(length - 1))
return nil if high < low
mid = (low + high) >> 1
case val <=> self[mid]
when -1
binary_search(val, low, mid - 1)
when 1
binary_search(val, mid + 1, high)
else mid
end
end
end
[0,42,45,24324,99999].each do |val|
i = ary.binary_search(val)
if i
puts "found
else
puts "
end
end
class String
ALFABET = ("A".."Z").to_a
def caesar_cipher(num)
self.tr(ALFABET.join, ALFABET.rotate(num).join)
end
end
encypted  = "THEYBROKEOURCIPHEREVERYONECANREADTHIS".caesar_cipher(3)
decrypted = encypted.caesar_cipher(-3)
n = 0
loop do
puts "%o" % n
n += 1
end
for n in (0..)
puts n.to_s(8)
end
0.upto(1/0.0) do |n|
printf "%o\n", n
end
0.step do |n|
puts format("%o", n)
end
class Graph
Vertex = Struct.new(:name, :neighbours, :dist, :prev)
def initialize(graph)
@vertices = Hash.new{|h,k| h[k]=Vertex.new(k,[],Float::INFINITY)}
@edges = {}
graph.each do |(v1, v2, dist)|
@vertices[v1].neighbours << v2
@vertices[v2].neighbours << v1
@edges[[v1, v2]] = @edges[[v2, v1]] = dist
end
@dijkstra_source = nil
end
def dijkstra(source)
return  if @dijkstra_source == source
q = @vertices.values
q.each do |v|
v.dist = Float::INFINITY
v.prev = nil
end
@vertices[source].dist = 0
until q.empty?
u = q.min_by {|vertex| vertex.dist}
break if u.dist == Float::INFINITY
q.delete(u)
u.neighbours.each do |v|
vv = @vertices[v]
if q.include?(vv)
alt = u.dist + @edges[[u.name, v]]
if alt < vv.dist
vv.dist = alt
vv.prev = u.name
end
end
end
end
@dijkstra_source = source
end
def shortest_path(source, target)
dijkstra(source)
path = []
u = target
while u
path.unshift(u)
u = @vertices[u].prev
end
return path, @vertices[target].dist
end
def to_s
"
end
end
g = Graph.new([ [:a, :b, 7],
])
start, stop = :a, :e
path, dist = g.shortest_path(start, stop)
puts "shortest path from
puts path.join(" -> ")
def factorial_recursive(n)
n.zero? ? 1 : n * factorial_recursive(n - 1)
end
def factorial_tail_recursive(n, prod = 1)
n.zero? ? prod : factorial_tail_recursive(n - 1, prod * n)
end
def factorial_iterative(n)
(2...n).each { |i| n *= i }
n.zero? ? 1 : n
end
def factorial_inject(n)
(1..n).inject(1){ |prod, i| prod * i }
end
def factorial_reduce(n)
(2..n).reduce(1, :*)
end
require 'benchmark'
n = 400
m = 10000
Benchmark.bm(16) do |b|
b.report('recursive:')       {m.times {factorial_recursive(n)}}
b.report('tail recursive:')  {m.times {factorial_tail_recursive(n)}}
b.report('iterative:')       {m.times {factorial_iterative(n)}}
b.report('inject:')          {m.times {factorial_inject(n)}}
b.report('reduce:')          {m.times {factorial_reduce(n)}}
end
1.upto(100) do |n|
print "Fizz" if a = (n % 3).zero?
print "Buzz" if b = (n % 5).zero?
print n unless (a || b)
puts
end
def multiply(a, b)
a * b
end
def swap(a, b)
return b, a
end
40902.gcd(24140)
require 'priority_queue'
def huffman_encoding(str)
char_count = Hash.new(0)
str.each_char {|c| char_count[c] += 1}
pq = CPriorityQueue.new
char_count.each {|char, count| pq.push(char, count)}
while pq.length > 1
key1, prio1 = pq.delete_min
key2, prio2 = pq.delete_min
pq.push([key1, key2], prio1 + prio2)
end
Hash[*generate_encoding(pq.min_key)]
end
def generate_encoding(ary, prefix="")
case ary
when Array
generate_encoding(ary[0], "
else
[ary, prefix]
end
end
def encode(str, encoding)
str.each_char.collect {|char| encoding[char]}.join
end
def decode(encoded, encoding)
rev_enc = encoding.invert
decoded = ""
pos = 0
while pos < encoded.length
key = ""
while rev_enc[key].nil?
key << encoded[pos]
pos += 1
end
decoded << rev_enc[key]
end
decoded
end
str = "this is an example for huffman encoding"
encoding = huffman_encoding(str)
encoding.to_a.sort.each {|x| p x}
enc = encode(str, encoding)
dec = decode(enc, encoding)
puts "success!" if str == dec
puts (1..5).map { |i| "*" * i }
i = 1024
while i > 0 do
puts i
i /= 2
end
def merge_sort(m)
return m if m.length <= 1
middle = m.length / 2
left = merge_sort(m[0...middle])
right = merge_sort(m[middle..-1])
merge(left, right)
end
def merge(left, right)
result = []
until left.empty? || right.empty?
result << (left.first<=right.first ? left.shift : right.shift)
end
result + left + right
end
p merge_sort(ary)
def multiplication_table(n)
1.upto(n) do |x|
print "%3d |" % x
1.upto(x-1) {|y| print "    "}
x.upto(n)   {|y| print " %3d" % (x*y)}
puts
end
end
multiplication_table 12
def palindrome?(s)
s == s.reverse
end
class Array
def quick_sort
return self if length <= 1
pivot = self[0]
less, greatereq = self[1..-1].partition { |x| x < pivot }
less.quick_sort + [pivot] + greatereq.quick_sort
end
end
str = "I am a string"
p "Ends with 'string'" if str =~ /string$/
p "Does not start with 'You'" unless str =~ /^You/
str = "asdf"
reversed = str.reverse
"résumé niño".reverse
s = "hello"
puts "
puts s + " literal"
s += " literal"
puts s
s << " another"
puts s
s = "hello"
puts s.concat(" literal")
puts s
puts s.prepend("Alice said: ")
puts s
arr = [1,2,3,4,5]
p sum = arr.inject(0) { |sum, item| sum + item }
p product = arr.inject(1) { |prod, element| prod * element }plural = 's'
99.downto(1) do |i|
puts "
puts "
puts "Take one down, pass it around!"
plural = '' if i - 1 == 1
if i > 1
puts "
puts
else
puts "No more bottles of beer on the wall!"
end
end
puts 'Enter x and y'
x = gets.to_i
y = gets.to_i
puts "Sum:
"Difference:
"Product:
"Quotient:
"Quotient:
"Remainder:
"Exponentiation:
"Quotient: %d with Remainder: %d" % x.divmod(y)
arr1 = [1, 2, 3]
arr2 = [4, 5, 6]
arr3 = [7, 8, 9]
arr4 = arr1 + arr2
arr4.concat(arr3)
class Array
def binary_search(val, low=0, high=(length - 1))
return nil if high < low
mid = (low + high) >> 1
case val <=> self[mid]
when -1
binary_search(val, low, mid - 1)
when 1
binary_search(val, mid + 1, high)
else mid
end
end
end
[0,42,45,24324,99999].each do |val|
i = ary.binary_search(val)
if i
puts "found
else
puts "
end
end
class String
ALFABET = ("A".."Z").to_a
def caesar_cipher(num)
self.tr(ALFABET.join, ALFABET.rotate(num).join)
end
end
encypted  = "THEYBROKEOURCIPHEREVERYONECANREADTHIS".caesar_cipher(3)
decrypted = encypted.caesar_cipher(-3)
n = 0
loop do
puts "%o" % n
n += 1
end
for n in (0..)
puts n.to_s(8)
end
0.upto(1/0.0) do |n|
printf "%o\n", n
end
0.step do |n|
puts format("%o", n)
end
class Graph
Vertex = Struct.new(:name, :neighbours, :dist, :prev)
def initialize(graph)
@vertices = Hash.new{|h,k| h[k]=Vertex.new(k,[],Float::INFINITY)}
@edges = {}
graph.each do |(v1, v2, dist)|
@vertices[v1].neighbours << v2
@vertices[v2].neighbours << v1
@edges[[v1, v2]] = @edges[[v2, v1]] = dist
end
@dijkstra_source = nil
end
def dijkstra(source)
return  if @dijkstra_source == source
q = @vertices.values
q.each do |v|
v.dist = Float::INFINITY
v.prev = nil
end
@vertices[source].dist = 0
until q.empty?
u = q.min_by {|vertex| vertex.dist}
break if u.dist == Float::INFINITY
q.delete(u)
u.neighbours.each do |v|
vv = @vertices[v]
if q.include?(vv)
alt = u.dist + @edges[[u.name, v]]
if alt < vv.dist
vv.dist = alt
vv.prev = u.name
end
end
end
end
@dijkstra_source = source
end
def shortest_path(source, target)
dijkstra(source)
path = []
u = target
while u
path.unshift(u)
u = @vertices[u].prev
end
return path, @vertices[target].dist
end
def to_s
"
end
end
g = Graph.new([ [:a, :b, 7],
])
start, stop = :a, :e
path, dist = g.shortest_path(start, stop)
puts "shortest path from
puts path.join(" -> ")
def factorial_recursive(n)
n.zero? ? 1 : n * factorial_recursive(n - 1)
end
def factorial_tail_recursive(n, prod = 1)
n.zero? ? prod : factorial_tail_recursive(n - 1, prod * n)
end
def factorial_iterative(n)
(2...n).each { |i| n *= i }
n.zero? ? 1 : n
end
def factorial_inject(n)
(1..n).inject(1){ |prod, i| prod * i }
end
def factorial_reduce(n)
(2..n).reduce(1, :*)
end
require 'benchmark'
n = 400
m = 10000
Benchmark.bm(16) do |b|
b.report('recursive:')       {m.times {factorial_recursive(n)}}
b.report('tail recursive:')  {m.times {factorial_tail_recursive(n)}}
b.report('iterative:')       {m.times {factorial_iterative(n)}}
b.report('inject:')          {m.times {factorial_inject(n)}}
b.report('reduce:')          {m.times {factorial_reduce(n)}}
end
1.upto(100) do |n|
print "Fizz" if a = (n % 3).zero?
print "Buzz" if b = (n % 5).zero?
print n unless (a || b)
puts
end
def multiply(a, b)
a * b
end
def swap(a, b)
return b, a
end
40902.gcd(24140)
require 'priority_queue'
def huffman_encoding(str)
char_count = Hash.new(0)
str.each_char {|c| char_count[c] += 1}
pq = CPriorityQueue.new
char_count.each {|char, count| pq.push(char, count)}
while pq.length > 1
key1, prio1 = pq.delete_min
key2, prio2 = pq.delete_min
pq.push([key1, key2], prio1 + prio2)
end
Hash[*generate_encoding(pq.min_key)]
end
def generate_encoding(ary, prefix="")
case ary
when Array
generate_encoding(ary[0], "
else
[ary, prefix]
end
end
def encode(str, encoding)
str.each_char.collect {|char| encoding[char]}.join
end
def decode(encoded, encoding)
rev_enc = encoding.invert
decoded = ""
pos = 0
while pos < encoded.length
key = ""
while rev_enc[key].nil?
key << encoded[pos]
pos += 1
end
decoded << rev_enc[key]
end
decoded
end
str = "this is an example for huffman encoding"
encoding = huffman_encoding(str)
encoding.to_a.sort.each {|x| p x}
enc = encode(str, encoding)
dec = decode(enc, encoding)
puts "success!" if str == dec
puts (1..5).map { |i| "*" * i }
i = 1024
while i > 0 do
puts i
i /= 2
end
def merge_sort(m)
return m if m.length <= 1
middle = m.length / 2
left = merge_sort(m[0...middle])
right = merge_sort(m[middle..-1])
merge(left, right)
end
def merge(left, right)
result = []
until left.empty? || right.empty?
result << (left.first<=right.first ? left.shift : right.shift)
end
result + left + right
end
p merge_sort(ary)
def multiplication_table(n)
1.upto(n) do |x|
print "%3d |" % x
1.upto(x-1) {|y| print "    "}
x.upto(n)   {|y| print " %3d" % (x*y)}
puts
end
end
multiplication_table 12
def palindrome?(s)
s == s.reverse
end
class Array
def quick_sort
return self if length <= 1
pivot = self[0]
less, greatereq = self[1..-1].partition { |x| x < pivot }
less.quick_sort + [pivot] + greatereq.quick_sort
end
end
str = "I am a string"
p "Ends with 'string'" if str =~ /string$/
p "Does not start with 'You'" unless str =~ /^You/
str = "asdf"
reversed = str.reverse
"résumé niño".reverse
s = "hello"
puts "
puts s + " literal"
s += " literal"
puts s
s << " another"
puts s
s = "hello"
puts s.concat(" literal")
puts s
puts s.prepend("Alice said: ")
puts s
arr = [1,2,3,4,5]
p sum = arr.inject(0) { |sum, item| sum + item }
p product = arr.inject(1) { |prod, element| prod * element }plural = 's'
99.downto(1) do |i|
puts "
puts "
puts "Take one down, pass it around!"
plural = '' if i - 1 == 1
if i > 1
puts "
puts
else
puts "No more bottles of beer on the wall!"
end
end
puts 'Enter x and y'
x = gets.to_i
y = gets.to_i
puts "Sum:
"Difference:
"Product:
"Quotient:
"Quotient:
"Remainder:
"Exponentiation:
"Quotient: %d with Remainder: %d" % x.divmod(y)
arr1 = [1, 2, 3]
arr2 = [4, 5, 6]
arr3 = [7, 8, 9]
arr4 = arr1 + arr2
arr4.concat(arr3)
class Array
def binary_search(val, low=0, high=(length - 1))
return nil if high < low
mid = (low + high) >> 1
case val <=> self[mid]
when -1
binary_search(val, low, mid - 1)
when 1
binary_search(val, mid + 1, high)
else mid
end
end
end
[0,42,45,24324,99999].each do |val|
i = ary.binary_search(val)
if i
puts "found
else
puts "
end
end
class String
ALFABET = ("A".."Z").to_a
def caesar_cipher(num)
self.tr(ALFABET.join, ALFABET.rotate(num).join)
end
end
encypted  = "THEYBROKEOURCIPHEREVERYONECANREADTHIS".caesar_cipher(3)
decrypted = encypted.caesar_cipher(-3)
n = 0
loop do
puts "%o" % n
n += 1
end
for n in (0..)
puts n.to_s(8)
end
0.upto(1/0.0) do |n|
printf "%o\n", n
end
0.step do |n|
puts format("%o", n)
end
class Graph
Vertex = Struct.new(:name, :neighbours, :dist, :prev)
def initialize(graph)
@vertices = Hash.new{|h,k| h[k]=Vertex.new(k,[],Float::INFINITY)}
@edges = {}
graph.each do |(v1, v2, dist)|
@vertices[v1].neighbours << v2
@vertices[v2].neighbours << v1
@edges[[v1, v2]] = @edges[[v2, v1]] = dist
end
@dijkstra_source = nil
end
def dijkstra(source)
return  if @dijkstra_source == source
q = @vertices.values
q.each do |v|
v.dist = Float::INFINITY
v.prev = nil
end
@vertices[source].dist = 0
until q.empty?
u = q.min_by {|vertex| vertex.dist}
break if u.dist == Float::INFINITY
q.delete(u)
u.neighbours.each do |v|
vv = @vertices[v]
if q.include?(vv)
alt = u.dist + @edges[[u.name, v]]
if alt < vv.dist
vv.dist = alt
vv.prev = u.name
end
end
end
end
@dijkstra_source = source
end
def shortest_path(source, target)
dijkstra(source)
path = []
u = target
while u
path.unshift(u)
u = @vertices[u].prev
end
return path, @vertices[target].dist
end
def to_s
"
end
end
g = Graph.new([ [:a, :b, 7],
])
start, stop = :a, :e
path, dist = g.shortest_path(start, stop)
puts "shortest path from
puts path.join(" -> ")
def factorial_recursive(n)
n.zero? ? 1 : n * factorial_recursive(n - 1)
end
def factorial_tail_recursive(n, prod = 1)
n.zero? ? prod : factorial_tail_recursive(n - 1, prod * n)
end
def factorial_iterative(n)
(2...n).each { |i| n *= i }
n.zero? ? 1 : n
end
def factorial_inject(n)
(1..n).inject(1){ |prod, i| prod * i }
end
def factorial_reduce(n)
(2..n).reduce(1, :*)
end
require 'benchmark'
n = 400
m = 10000
Benchmark.bm(16) do |b|
b.report('recursive:')       {m.times {factorial_recursive(n)}}
b.report('tail recursive:')  {m.times {factorial_tail_recursive(n)}}
b.report('iterative:')       {m.times {factorial_iterative(n)}}
b.report('inject:')          {m.times {factorial_inject(n)}}
b.report('reduce:')          {m.times {factorial_reduce(n)}}
end
1.upto(100) do |n|
print "Fizz" if a = (n % 3).zero?
print "Buzz" if b = (n % 5).zero?
print n unless (a || b)
puts
end
def multiply(a, b)
a * b
end
def swap(a, b)
return b, a
end
40902.gcd(24140)
require 'priority_queue'
def huffman_encoding(str)
char_count = Hash.new(0)
str.each_char {|c| char_count[c] += 1}
pq = CPriorityQueue.new
char_count.each {|char, count| pq.push(char, count)}
while pq.length > 1
key1, prio1 = pq.delete_min
key2, prio2 = pq.delete_min
pq.push([key1, key2], prio1 + prio2)
end
Hash[*generate_encoding(pq.min_key)]
end
def generate_encoding(ary, prefix="")
case ary
when Array
generate_encoding(ary[0], "
else
[ary, prefix]
end
end
def encode(str, encoding)
str.each_char.collect {|char| encoding[char]}.join
end
def decode(encoded, encoding)
rev_enc = encoding.invert
decoded = ""
pos = 0
while pos < encoded.length
key = ""
while rev_enc[key].nil?
key << encoded[pos]
pos += 1
end
decoded << rev_enc[key]
end
decoded
end
str = "this is an example for huffman encoding"
encoding = huffman_encoding(str)
encoding.to_a.sort.each {|x| p x}
enc = encode(str, encoding)
dec = decode(enc, encoding)
puts "success!" if str == dec
puts (1..5).map { |i| "*" * i }
i = 1024
while i > 0 do
puts i
i /= 2
end
def merge_sort(m)
return m if m.length <= 1
middle = m.length / 2
left = merge_sort(m[0...middle])
right = merge_sort(m[middle..-1])
merge(left, right)
end
def merge(left, right)
result = []
until left.empty? || right.empty?
result << (left.first<=right.first ? left.shift : right.shift)
end
result + left + right
end
p merge_sort(ary)
def multiplication_table(n)
1.upto(n) do |x|
print "%3d |" % x
1.upto(x-1) {|y| print "    "}
x.upto(n)   {|y| print " %3d" % (x*y)}
puts
end
end
multiplication_table 12
def palindrome?(s)
s == s.reverse
end
class Array
def quick_sort
return self if length <= 1
pivot = self[0]
less, greatereq = self[1..-1].partition { |x| x < pivot }
less.quick_sort + [pivot] + greatereq.quick_sort
end
end
str = "I am a string"
p "Ends with 'string'" if str =~ /string$/
p "Does not start with 'You'" unless str =~ /^You/
str = "asdf"
reversed = str.reverse
"résumé niño".reverse
s = "hello"
puts "
puts s + " literal"
s += " literal"
puts s
s << " another"
puts s
s = "hello"
puts s.concat(" literal")
puts s
puts s.prepend("Alice said: ")
puts s
arr = [1,