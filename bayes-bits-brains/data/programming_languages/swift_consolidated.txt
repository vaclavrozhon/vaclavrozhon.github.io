for i in (1...99).reversed() {
print("\(i) bottles of beer on the wall, \(i) bottles of beer.")
let next = i == 1 ? "no" : (i-1).description
print("Take one down and pass it around, \(next) bottles of beer on the wall.")
}
let a = 6
let b = 4
print("sum =\(a+b)")
print("difference = \(a-b)")
print("product = \(a*b)")
print("Integer quotient = \(a/b)")
print("Remainder = (a%b)")
print("No operator for Exponential")
let array1 = [1,2,3]
let array2 = [4,5,6]
let array3 = array1 + array2
var a = [String: Int]()
var b: [String: Int] = [:]
var c = [String: Int](minimumCapacity: 42)
c["foo"] = 3
var d = ["foo": 2, "bar": 42, "baz": -1]
func binarySearch<T: Comparable>(xs: [T], x: T) -> Int? {
var recurse: ((Int, Int) -> Int?)!
recurse = {(low, high) in switch (low + high) / 2 {
case _ where high < low: return nil
case let mid where xs[mid] > x: return recurse(low, mid - 1)
case let mid where xs[mid] < x: return recurse(mid + 1, high)
case let mid: return mid
}}
return recurse(0, xs.count - 1)
}
func usage(_ e:String) {
print("error: \(e)")
print("./caeser -e 19 a-secret-string")
print("./caeser -d 19 tskxvjxlskljafz")
}
func charIsValid(_ c:Character) -> Bool {
return c.isASCII && ( c.isLowercase || 45 == c.asciiValue )
}
func charRotate(_ c:Character, _ by:Int) -> Character {
var cv:UInt8! = c.asciiValue
if 45 == cv { cv = 96 }
cv += UInt8(by)
if 122 < cv { cv -= 27 }
if 96 == cv { cv = 45 }
return Character(UnicodeScalar(cv))
}
func caesar(_ enc:Bool, _ key:Int, _ word:String) -> String {
let r = enc ? key : 27 - key
func charRotateWithKey(_ c:Character) -> Character {
return charRotate(c,r)
}
return String(word.map(charRotateWithKey))
}
func main() {
var encrypt = true
if 4 != CommandLine.arguments.count {
return usage("caesar expects exactly three arguments")
}
switch ( CommandLine.arguments[1] ) {
case "-e":
encrypt = true
case "-d":
encrypt = false
default:
return usage("first argument must be -e (encrypt) or -d (decrypt)")
}
guard let key = Int(CommandLine.arguments[2]) else {
return usage("second argument not a number (must be in range 0-26)")
}
if key < 0 || 26 < key {
return usage("second argument not in range 0-26")
}
if !CommandLine.arguments[3].allSatisfy(charIsValid) {
return usage("third argument must only be lowercase ascii characters, or -")
}
let ans = caesar(encrypt,key,CommandLine.arguments[3])
print("\(ans)")
}
func test() {
if ( Character("a") != charRotate(Character("a"),0) ) {
print("Test Fail 1")
}
if ( Character("-") != charRotate(Character("-"),0) ) {
print("Test Fail 2")
}
if ( Character("-") != charRotate(Character("z"),1) ) {
print("Test Fail 3")
}
if ( Character("z") != charRotate(Character("-"),26)) {
print("Test Fail 4")
}
if ( "ihgmkzma" != caesar(true,8,"a-zecret") ) {
print("Test Fail 5")
}
if ( "a-zecret" != caesar(false,8,"ihgmkzma") ) {
print("Test Fail 6")
}
}
test()
main()
import Foundation
func octalSuccessor(value: String) -> String {
if value.isEmpty {
return "1"
} else {
let i = value.startIndex, j = value.endIndex.predecessor()
switch (value[j]) {
case "0": return value[i..<j] + "1"
case "1": return value[i..<j] + "2"
case "2": return value[i..<j] + "3"
case "3": return value[i..<j] + "4"
case "4": return value[i..<j] + "5"
case "5": return value[i..<j] + "6"
case "6": return value[i..<j] + "7"
case "7": return octalSuccessor(value[i..<j]) + "0"
default:
NSException(name:"InvalidDigit", reason: "InvalidOctalDigit", userInfo: nil).raise();
return ""
}
}
}
var n = "0"
while strtoul(n, nil, 8) < UInt.max {
println(n)
n = octalSuccessor(n)
}
typealias WeightedEdge = (Int, Int, Int)
struct Grid<T> {
var nodes: [Node<T>]
mutating func addNode(data: T) -> Int {
nodes.append(Node(data: data, edges: []))
return nodes.count - 1
}
mutating func createEdges(weights: [WeightedEdge]) {
for (start, end, weight) in weights {
nodes[start].edges.append((end, weight))
nodes[end].edges.append((start, weight))
}
}
func findPath(start: Int, end: Int) -> ([Int], Int)? {
var dist = Array(repeating: (Int.max, nil as Int?), count: nodes.count)
var heap = Heap<State>(sort: { $0.cost < $1.cost })
dist[start] = (0, nil)
heap.insert(State(node: start, cost: 0))
while let state = heap.remove(at: 0) {
if state.node == end {
var path = [end]
var currentDist = dist[end]
while let prev = currentDist.1 {
path.append(prev)
currentDist = dist[prev]
}
return (path.reversed(), state.cost)
}
guard state.cost <= dist[state.node].0 else {
continue
}
for edge in nodes[state.node].edges {
let next = State(node: edge.0, cost: state.cost + edge.1)
if next.cost < dist[next.node].0 {
dist[next.node] = (next.cost, state.node)
heap.insert(next)
}
}
}
return nil
}
}
struct Node<T> {
var data: T
var edges: [(Int, Int)]
}
struct State {
var node: Int
var cost: Int
}
var grid = Grid<String>(nodes: [])
let (a, b, c, d, e, f) = (
grid.addNode(data: "a"),
grid.addNode(data: "b"),
grid.addNode(data: "c"),
grid.addNode(data: "d"),
grid.addNode(data: "e"),
grid.addNode(data: "f")
)
grid.createEdges(weights: [
])
guard let (path, cost) = grid.findPath(start: a, end: e) else {
fatalError("Could not find path")
}
print("Cost: \(cost)")
print(path.map({ grid.nodes[$0].data }).joined(separator: " -> "))
func multiply(a: Double, b: Double) -> Double {
return a * b
}
func swap<T>(inout a: T, inout b: T) {
}
func gcd(a: Int, b: Int) -> Int {
var a = abs(a)
var b = abs(b)
if (b > a) { swap(&a, &b) }
while (b > 0) { (a, b) = (b, a % b) }
return a
}
func gcdr (a: Int, b: Int) -> Int {
var a = abs(a)
var b = abs(b)
if (b > a) { swap(&a, &b) }
return gcd_rec(a,b)
}
private func gcd_rec(a: Int, b: Int) -> Int {
return b == 0 ? a : gcd_rec(b, a % b)
}
println("Iterative: GCD of \(a) and \(b) is \(gcd(a, b))")
println("Recursive: GCD of \(a) and \(b) is \(gcdr(a, b))")
}
enum HuffmanTree<T> {
case Leaf(T)
indirect case Node(HuffmanTree<T>, HuffmanTree<T>)
func printCodes(prefix: String) {
switch(self) {
case let .Leaf(c):
print("\(c)\t\(prefix)")
case let .Node(l, r):
l.printCodes(prefix + "0")
r.printCodes(prefix + "1")
}
}
}
func buildTree<T>(freqs: [(T, Int)]) -> HuffmanTree<T> {
assert(freqs.count > 0, "must contain at least one character")
let leaves : [(Int, HuffmanTree<T>)] = freqs.sort { (p1, p2) in p1.1 < p2.1 }.map { (x, w) in (w, .Leaf(x)) }
var nodes = [(Int, HuffmanTree<T>)]()
for var i = 0, j = 0; ; {
assert(i < leaves.count || j < nodes.count)
var e1 : (Int, HuffmanTree<T>)
if j == nodes.count || i < leaves.count && leaves[i].0 < nodes[j].0 {
e1 = leaves[i]
i++
} else {
e1 = nodes[j]
j++
}
if i == leaves.count && j == nodes.count {
return e1.1
}
var e2 : (Int, HuffmanTree<T>)
if j == nodes.count || i < leaves.count && leaves[i].0 < nodes[j].0 {
e2 = leaves[i]
i++
} else {
e2 = nodes[j]
j++
}
nodes.append((e1.0 + e2.0, .Node(e1.1, e2.1)))
}
}
func getFreqs<S : SequenceType where S.Generator.Element : Hashable>(seq: S) -> [(S.Generator.Element, Int)] {
var freqs : [S.Generator.Element : Int] = [:]
for c in seq {
freqs[c] = (freqs[c] ?? 0) + 1
}
return Array(freqs)
}
let str = "this is an example for huffman encoding"
let charFreqs = getFreqs(str.characters)
let tree = buildTree(charFreqs)
print("Symbol\tHuffman code")
tree.printCodes("")
for i in 1...5 {
for _ in 1...i {
print("*", terminator: "")
}
print()
}
var i = 1024
while i > 0 {
println(i)
i /= 2
}
import Foundation
let size = 12
func printRow(with:Int, upto:Int) {
print(String(repeating: " ", count: (with-1)*4), terminator: "")
for i in with...upto {
print(String(format: "%l4d", i*with), terminator: "")
}
print()
}
print("    ", terminator: ""); printRow( with: 1, upto: size)
print( String(repeating: "–", count: (size+1)*4 ))
for i in 1...size {
print(String(format: "%l4d",i), terminator:"")
printRow( with: i, upto: size)
}
import Foundation
extension String {
subscript (i: Int) -> String {
return String(Array(self)[i])
}
}
func isPalindrome(str:String) -> Bool {
if (count(str) == 0 || count(str) == 1) {
return true
}
let removeRange = Range<String.Index>(start: advance(str.startIndex, 1), end: advance(str.endIndex, -1))
if (str[0] == str[count(str) - 1]) {
return isPalindrome(str.substringWithRange(removeRange))
}
return false
}
func primeDecomposition<T: BinaryInteger>(of n: T) -> [T] {
guard n > 2 else { return [] }
func step(_ x: T) -> T {
return 1 + (x << 2) - ((x >> 1) << 1)
}
let maxQ = T(Double(n).squareRoot())
var d: T = 1
var q: T = n % 2 == 0 ? 2 : 3
while q <= maxQ && n % q != 0 {
q = step(d)
d += 1
}
return q <= maxQ ? [q] + primeDecomposition(of: n / q) : [n]
}
for prime in Eratosthenes(upTo: 60) {
let m = Int(pow(2, Double(prime))) - 1
let decom = primeDecomposition(of: m)
print("2^\(prime) - 1 = \(m) => \(decom)")
}
func quicksort<T where T : Comparable>(inout elements: [T], range: Range<Int>) {
if (range.endIndex - range.startIndex > 1) {
let pivotIndex = partition(&elements, range)
quicksort(&elements, range.startIndex ..< pivotIndex)
quicksort(&elements, pivotIndex+1 ..< range.endIndex)
}
}
func quicksort<T where T : Comparable>(inout elements: [T]) {
quicksort(&elements, indices(elements))
}
func reverseString(s: String) -> String {
return String(s.characters.reverse())
}
print(reverseString("asdf"))
print(reverseString("as⃝df̅"))
let s = "hello"
println(s + " literal")
let s1 = s + " literal"
println(s1)
let a = [1, 2, 3, 4, 5]
println(a.reduce(0, +))
println(a.reduce(1, *))
println(reduce(a, 0, +))
println(reduce(a, 1, *))
func hanoi(n:Int, a:String, b:String, c:String) {
if (n > 0) {
hanoi(n - 1, a, c, b)
println("Move disk from \(a) to \(c)")
hanoi(n - 1, b, a, c)
}
}
hanoi(4, "A", "B", "C")